openapi: 3.0.0
info:
    title: My API Documentation
    version: 1.0.0
    description: This is the API documentation for my app.
servers:
    - url: http://16.170.221.43:80/
      description: Local server

paths:
    /fetch-api-key:
        get:
            summary: Retrieve an API key
            description: Fetch the API key for a given wallet address.
            parameters:
                - in: query
                  name: walletAddr
                  schema:
                      type: string
                  required: true
                  description: Wallet address to fetch the API key for
            responses:
                200:
                    description: Successfully fetched the API key.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    apiKey:
                                        type: string
                                    message:
                                        type: string
                400:
                    description: Bad request.

    /store-api-key:
        post:
            summary: Store an API key
            description: Store an API key for a wallet address.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                walletAddr:
                                    type: string
                                apiKey:
                                    type: string
            responses:
                200:
                    description: API key stored successfully.

    /upload-content:
        post:
            summary: Upload content
            description: Uploads content and stores final CID.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                contentx:
                                    type: string
                                apiKey:
                                    type: string
                                cidMedia:
                                    type: string
                                walletAddr:
                                    type: string
            responses:
                200:
                    description: Final content uploaded successfully.

    /updateAnalytics:
        post:
            summary: Update content analytics
            description: Updates analytics for a specific piece of content.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                walletAddr:
                                    type: string
                                    description: Wallet address associated with the content.
                                cid:
                                    type: string
                                    description: Content ID to update analytics for.
                                viewerAddr:
                                    type: string
                                    description: Viewer's wallet address.
                                update:
                                    type: string
                                    description: Type of update to be applied to analytics.
            responses:
                200:
                    description: Analytics updated successfully.
                400:
                    description: Invalid request parameters.

    /getArticles:
        get:
            summary: Get paginated articles
            description: Retrieves a paginated list of articles.
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                  description: Page number
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                  description: Number of articles per page
            responses:
                200:
                    description: A paginated list of articles.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Article"

    /getUserAnalytics:
        get:
            summary: Get user analytics
            description: Retrieves analytics for a specific user.
            parameters:
                - in: query
                  name: walletAddr
                  schema:
                      type: string
                  required: true
                  description: Wallet address to get analytics for
            responses:
                200:
                    description: Analytics data for the user.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserAnalytics"

    /getUserPosts:
        get:
            summary: Get user posts
            description: Retrieves all posts made by a specific user.
            parameters:
                - in: query
                  name: walletAddr
                  schema:
                      type: string
                  required: true
                  description: Wallet address to get posts for
            responses:
                200:
                    description: A list of posts made by the user.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Post"

    /createPost:
        post:
            summary: Create a new post
            description: Creates a new post with the given details.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                creator:
                                    type: string
                                content:
                                    type: string
            responses:
                200:
                    description: Post created successfully.

    /createUser:
        post:
            summary: Create a new user
            description: Creates a new user with the given details.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                useradd:
                                    type: string
            responses:
                200:
                    description: User created successfully.

    /mintAndTransfer:
        post:
            summary: Mint and Transfer NFT
            description: Mints a new NFT and transfers it to the specified address.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                transferToAddress:
                                    type: string
                                tokenURI:
                                    type: string
            responses:
                200:
                    description: NFT minted and transferred successfully.

    /getTokenURI:
        get:
            summary: Get Token URI
            description: Retrieves the token URI for a specified token ID.
            parameters:
                - in: query
                  name: tokenId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Token URI retrieved successfully.

components:
    schemas:
        Article:
            type: object
            properties:
                publicKey:
                    type: string
                cid:
                    type: string
                Views:
                    type: integer
                Likes:
                    type: integer
                Dislikes:
                    type: integer
                totalTime:
                    type: integer
                timestamp:
                    type: string
                    format: date-time

        UserAnalytics:
            type: object
            properties:
                totalViews:
                    type: integer
                totalTimeSpent:
                    type: integer
                totalLikes:
                    type: integer
                totalDislikes:
                    type: integer

        Post:
            type: object
            properties:
                cid:
                    type: string
                Views:
                    type: integer
                Likes:
                    type: array
                    items:
                        type: string
                Dislikes:
                    type: array
                    items:
                        type: string
                totalTime:
                    type: integer
                timestamp:
                    type: string
                    format: date-time
